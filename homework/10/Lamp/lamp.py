from protocol import scheme

'''
    1. При запуске фонарь должен запрашивать хост:порт (по умолчанию
    127.0.0.1:9999), подсоединяться по TCP и после этого начать отрабатывать
    протокол управления.
     
    2. При получении данных от сервера фонарь собирает целые команды (type +
    length + value) и, если type известен, обрабатывает команду, иначе молча ее
    игнорирует.
     
    3. При получении команды ON фонарь включается (отрисовку фонаря оставляем на
    ваше усмотрение).
     
    4. При получении команды OFF фонарь выключается.
     
    5. При получении команды COLOR фонарь меняет цвет.
     
    6. При завершении работы фонарь корректно закрывает соединение с сервером.
     
    7. Реализация фонаря позволяет легко добавлять любые новые команды.
     
    Проработанность обработки исключительных ситуаций (ошибки установления
    соединения, обрывы соединения) — на ваше усмотрение.
'''

class Lamp:
    def __init__(self):
        self.host = '127.0.0.1'
        self.port = '9999'
        self.scheme = scheme

    def get_message(self, message):
        while True:
            if message[0] in self.scheme.keys():
                length = int.from_bytes(message[1:3], byteorder='big')
                yield (self.scheme[message[0]], message[3:3+length])
            message = message[3+length:]





if __name__ == '__main__':
    a = Lamp()
    m = b''.join([b'\x20', b'\x00\x04', b'\xff\xff\xff'])
    a.get_message(m)
    m = b''.join([b'\x13', b'\x00\x00'])
    a.get_message(m)
